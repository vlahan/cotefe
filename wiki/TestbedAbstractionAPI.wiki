#summary Testbed Abstraction API
#labels CONET, REST, testbed, federation, WSN, API
#sidebar TableOfContents


=Overview=

The purpose of this document is to support both the implementation and use of the Testbed Abstraction API (TAA), an interface that aims to expose the capabilities of a cooperating object testbed as a service. The TAA was conceived in the context of the European Network of Excellence project CONET as part of the CONET Testbed Federation (CTF), where it represents a uniform interface across all member testbeds. It allows the developers for building applications (standalone, client-side web applications, server-side web applications, mash-ups) accessing the services offered by a given testbed. A prototype of the TAA has been implemented on top of TWIST, the TU Berlin Wireless Indoor Sensor Network, as a prove of concept of research for review and evaluation within the same project.

The TAA has been designed according to the REST architectural style. REST introduces design constraints with the promise to fully leverage the potential of the Web and its worldwide distributed infrastructure, in order to achieve scalability, reliability, extensibility of the service and interoperability with other Web Services.

After an introductory description of the core design aspects we provide a detailed specification of resources involved and we will show how to perform typical testbed operations in terms of manipulation of such resources, according to the REST architectural style.
Then, we provide a series of guidelines for the integration of the TAA with the legacy native interface provided by a given existing testbed for cooperating objects. We will show to install and extend the TAA software that we developed in order to adapt to any specific testbed. Finally, a detailed tutorial will show how to execute a sample experiment using the TAA.

=System Architecture=

The architecture of the TAA is shown in the picture here below. According to the  the testbed-independent and the testbed-specific parts] The implementation of the TAA can be divided in front-end and back-end. The front-end is the testbed independent part and thus can be reused across different testbeds. We provide a prototype of the TAA front-end implemented in Django. The back-end is the testbed specific part and must be provided by the testbed administrator. The bridge between the front-end and back-end is in charge for translating common HTTP requests into specific testbed commands, according to the specific testbed native API.

The Testbed Abstraction API aims to expose a Cooperating Object testbed as a service. In the context of the Testbed Federation, it represents a uniform interface across all member testbeds. It is built according to the REST architectural style. REST introduces design constraints with the promise to achieve scalability, extensibility and reliability.

The implementation of the TAA can be divided in front-end and back-end. The front-end is the testbed independent part and thus can be reused across different testbeds. We provide a prototype of the TAA front-end implemented in Django. The back-end is the testbed specific part and must be provided by the testbed administrator. The bridge between the front-end and back-end is in charge for translating common HTTP requests into specific testbed commands, according to the specific testbed native API.

=Services=

During the design phase of the TAA we leveraged the mature usage experience of our testbed (TWIST) in order to identify the need and the key steps of a typical experiment with cooperating objects. Testbeds play and important role in the design, development and test of protocols and applications as they provide controlled execution of experiments in a realistic environment, where functional and non-functional behaviors can be tracked and stored for further analysis and evaluation.

==Resource Discovery==

==Resource Reservation==

==Experiment Execution==

===Interactive Mode===

===Batch Mode===

==Experiment Results and Debug Data==

=Documentation=

==Introduction==

All testbed resources are accessed and manipulated in a similar way. Resources are identified by URLs and accessed by a common interface (HTTP methods). A list of resources is usually available through `/[resource name]`, while a single specific resource through `/[resource name]/[resource id]` and related subresources (i.e. a user's jobs) through `/[resource name]/[resource id]/[subresource name]`. It exposes testbed resources as REST resources, which can be accessed and manipulated through a uniform interface.



