CONET Review - July 19-20, 2011
Demo Walk-Though

User opens the browser and types the CTF server URL (Unauthenticated view of the CTF homepage)
User can expore/play with this view (public information i.e. statistics, jobs, announcements, etc.)

Authentication

The user signs on with their credentials
The user get the authenticated version of the homepage (dashboard)
User creates now projects with name “CONET Review”
User creates a new experiment “Demo 1”

Experiment Specification

Experiment specification (3 groups of nodes: gateway/subscriber, passive nodes/publishers, interference nodes)
TMote Sky (1 node for subscriber)
n-1-m publishers
m interferers OPTIONAL (NOT FOR THE TU DELFT) movable interferer
number of nodes CHECK HOW MANY NODES DELFT HAVE
n = 100, m = 5, platform TMote Sky
3 property sets
User uploads 3 different Images
Virtual Node Groups - User creates 3 VNG according to the PropertySets
Virtual Tasks
install image 1 to the virtual node group 1
install image 2 to the virtual node group 2
install image 3 to the virtual node group 3
(delay 30 secs)
inject following message to virtual node 1 (subscriber/sinks)
(start tracing)
(delay some time to establish)
inject interference pattern command which influences the communication in the network and reduces the goodput and this should be observed in the base station somehow (reduce goodput)
(delay 120 sec)
another injection = stop interfering
will observe better goodput
OPTIONAL WITH MOVABLE NODE we supply a movement pattern
(stop tracing)

Resource Reservation

Information about timing (days, hours, months)
User must be able to say “as soon as possible”
OPTIONAL: repeatable jobs (every week, every day, etc.)
Select 2 testbeds (TWIST and TU Delft) at the same time
Experiment Execution

Testbed independent real time control


Operation	Request to TFA	Request to TAA
Unauthenticated view (index.html)	GET /
GET /projects/
GET /experiments/
GET /testbeds/
GET /platforms/
GET /jobs/	


GET /
GET /platforms/
GET /jobs/
The user signs on with their credentials	[oauth_token]	[oauth_token]
Authenticated view (dashboard.html)	GET /users/id
GET /users/id/projects/
GET /users/id/experiments/
GET /users/id/jobs/	


GET /users/id/jobs/
User creates project “CONET Review”	POST /projects/	-
User creates experiment “Demo 1”	POST /experiments/	-
User creates property set 1	POST /property-sets/	-
User creates property set 2	POST /property-sets/	-
User creates property set 3	POST /property-sets/	-
User uploads image 1	POST /images/	-
User uploads image 2	POST /images/	-
User uploads image 3	POST /images/	-
User creates virtual node group 1	POST /virtual-node-groups/	-
User creates virtual node group 2	POST /virtual-node-groups/	-
User creates virtual node group 3	POST /virtual-node-groups/	-
Burn image 1 to virtual node group 1	PUT /virtual-node-groups/id	-
Burn image 2 to virtual node group 2	PUT /virtual-node-groups/id	-
Burn image 3 to virtual node group 3	PUT /virtual-node-groups/id	-
Get current jobs	GET /jobs/	GET /jobs/
Create a new job	POST /jobs/	POST /jobs/

CTF Y3 Demo Tutorial

Introduction

This document is a tutorial of the Y3 Review Demo of the CONET Testbed Federation (CTF). The demo shows how to use the CTF APIs for specification and execution of a Cooperating Object experiment. A stand-alone Java application is used for visualization of the network topology at the different steps of the experiment.
Description of the experiment

This experiments aims to demonstrate the effect of interference...
Code

Dowload the python scripts and the images from

https://svn.tkn.tu-berlin.de/svn/conet-testbed-federation/y3_demo/

folder structure
README (a txt version of this tutorial)
images/ (software images to be burned into node groups respectively)
scripts/ (python scripts execunting this demo)
demo_TFA_0_experiment_definition.py (creates an experiment)
demo_TFA_1_job_reservation.py (creates a job on twist)
demo_TFA_2A_job_deployment.py (installation of publishers and subscriber)
demo_TFA_2B_job_execution.py (installation of interferes + erase of interferers)


Download the GUI from

https://svn.tkn.tu-berlin.de/svn/tub-t2-contrib/trunk/apps/CONETDemo/gui
How to start the GUI

Node 12 is the subscriber node (sink)
Nodes 187 and 93 are the interferer nodes
All other nodes are publishers

Start the SSH tunnel to the serial forwarded of the sink node (password neniadgosp)

ssh -nNxTL 9012:localhost:9012 twistextern@www.twist.tu-berlin.de

Set the classpath for the Java GUI

CLASSPATH=/absolute/path/to/TinyCOPS_GUI.jar

Launch the Java GUI as jar (works on Linux)

java -jar TinyCOPS_GUI.jar

or as class (works on Mac OS X)

java net.tinyos.surge.MainClass sf@localhost:9012 12 NONE NONE NONE 187 93

alternatively it is possible to wrap the command into a while loop allowing the GUI to restart again in case of failed connection to the sink

while [ 1 ]; do java net.tinyos.surge.MainClass sf@localhost:9012 12 NONE NONE NONE 187 93; sleep 1; done

Robot control through the RESTful API (TAA)


native_id = 1000

GET https://www.twist.tu-berlin.de:8001/nodes/4dd1ba50

to get position

PATCH https://www.twist.tu-berlin.de:8001/nodes/4dd1ba50

with body

{
    "location_x" : 1.0,
    "location_y" : 1.0,
    "location_z" : 1.0
}

to set position

COORDINATES OF THE CORNERS OF THE ROBOT ROOM (by Jasper)

x0y1 = (25.5, 5)
x1y1 = (29.5, 5)
x1y0 = (29.5, 1.5)
x0y0 = (25.5, 1.5)

POSSIBLE WAYPOINTS

A = (27, 3)
B = (28, 4)
CTF Web Fronted

~/Downloads/appengine-java-sdk-1.5.1/bin/appcfg.sh --enable_jar_splitting update war